import asyncio
import logging
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from handlers import register_all_handlers
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.users import load_users
from utils.quotes import get_quote

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
USER_IDS = load_users()

# –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
times = [
    ("üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", 9),
    ("üå§ –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å?", 14),
    ("üåô –°–ø–æ–∫–æ–π–Ω—ã–π –≤–µ—á–µ—Ä!", 20)
]

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ü–∏—Ç–∞—Ç–æ–π
async def send_reminder(greeting):
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("üôÇ", callback_data="mood_good"),
        InlineKeyboardButton("üòê", callback_data="mood_neutral"),
        InlineKeyboardButton("üòü", callback_data="mood_bad")
    )
    quote = get_quote()

    for uid in USER_IDS:
        try:
            await bot.send_message(
                uid,
                f"{greeting} üíõ\n\n{quote}\n\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?",
                reply_markup=keyboard
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    register_all_handlers(dp)

    scheduler = AsyncIOScheduler()
    for greeting, hour in times:
        scheduler.add_job(send_reminder, CronTrigger(hour=hour, minute=0), args=[greeting])
    scheduler.start()

    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())

