from aiogram import Bot, Dispatcher, executor
from config import BOT_TOKEN
from handlers import register_all_handlers
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.users import load_users
from utils.quotes import get_quote  # ‚Üê –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token="8136341226:AAEzAzHRcgEShJall4fAfLrkTwiT6XuPe8s")
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
USER_IDS = load_users()

# –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä
times = [
    ("üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", 9),
    ("üå§ –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å?", 14),
    ("üåô –°–ø–æ–∫–æ–π–Ω—ã–π –≤–µ—á–µ—Ä!", 20)
]

# üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π
async def send_reminder(greeting):
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("üôÇ", callback_data="mood_good"),
        InlineKeyboardButton("üòê", callback_data="mood_neutral"),
        InlineKeyboardButton("üòü", callback_data="mood_bad")
    )

    quote = get_quote()  # ‚Üê —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
    for uid in USER_IDS:
        try:
            await bot.send_message(
                uid,
                f"{greeting} üíõ\n\n{quote}\n\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?",
                reply_markup=keyboard
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

# ‚è± –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def setup_scheduler():
    scheduler = AsyncIOScheduler()
    for greeting, hour in times:
        scheduler.add_job(send_reminder, CronTrigger(hour=hour, minute=0), args=[greeting])
    scheduler.start()

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    register_all_handlers(dp)
    setup_scheduler()
    executor.start_polling(dp, skip_updates=True)
