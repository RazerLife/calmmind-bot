from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import json
import os

from handlers.premium import is_premium
from utils.users import add_user
from utils.timezones import set_timezone
from utils.plot import generate_mood_plot
from utils.export import export_journal

DATA_FILE = "user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üìî –î–Ω–µ–≤–Ω–∏–∫")
    )
    kb.row(
        KeyboardButton("üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
        KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫")
    )
    kb.row(
        KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞"),
        KeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    )
    return kb

# /start
async def cmd_start(message: types.Message):
    add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª–∞—è –¥—É—à–∞! üíõ\n\n"
        "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ üßò‚Äç‚ôÄÔ∏è\n"
        "–í—ã–±–∏—Ä–∞–π, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=get_main_menu()
    )

# –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –∫–Ω–æ–ø–∫–∏
async def mood_request(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("üôÇ", callback_data="mood_good"),
        InlineKeyboardButton("üòê", callback_data="mood_neutral"),
        InlineKeyboardButton("üòü", callback_data="mood_bad")
    )
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
async def mood_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    mood = callback.data.replace("mood_", "")
    mood_map = {
        "good": "üôÇ –¢—ã –≤—ã–±—Ä–∞–ª–∞ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –†–∞–¥–∞ –∑–∞ —Ç–µ–±—è! ‚òÄÔ∏è",
        "neutral": "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–µ–±—è üíö",
        "bad": "üòü –¢—Ä–µ–≤–æ–∂–Ω–æ? –Ø —Ä—è–¥–æ–º, —Ç—ã –Ω–µ –æ–¥–Ω–∞ üíô"
    }

    data = load_data()
    if user_id not in data:
        data[user_id] = []
    data[user_id].append({
        "mood": mood,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    save_data(data)
    await callback.message.answer(mood_map.get(mood, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å üíõ"))
    await callback.answer()

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()

    if user_id not in data or not data[user_id]:
        await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∏–ª–∞—Å—å —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–µ–≥–æ–¥–Ω—è üíõ")
        return

    now = datetime.now()
    days = 30 if is_premium(user_id) else 3
    since = now - timedelta(days=days)

    moods = {"good": 0, "neutral": 0, "bad": 0}
    for entry in data[user_id]:
        mood_date = datetime.strptime(entry["date"], "%Y-%m-%d %H:%M:%S")
        if mood_date >= since:
            moods[entry["mood"]] += 1

    msg = (
        f"–í–æ—Ç –∫–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —Å–µ–±—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{days} –¥–Ω—è</b> üíõ:\n\n"
        f"üôÇ –•–æ—Ä–æ—à–æ ‚Äî {moods['good']} —Ä–∞–∑(–∞)\n"
        f"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî {moods['neutral']} —Ä–∞–∑(–∞)\n"
        f"üòü –ü–ª–æ—Ö–æ ‚Äî {moods['bad']} —Ä–∞–∑(–∞)\n\n"
        "–¢—ã —É–º–Ω–∏—á–∫–∞, —á—Ç–æ —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–æ–±–æ–π üå∑\n"
        "–ü–æ–º–Ω–∏: –ª—é–±—ã–µ —á—É–≤—Å—Ç–≤–∞ ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã. –Ø —Ä—è–¥–æ–º üíô"
    )
    await message.answer(msg, parse_mode="HTML")

# üìà –ì—Ä–∞—Ñ–∏–∫
async def send_mood_plot(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id not in data or not data[user_id]:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return
    path = generate_mood_plot(user_id, data[user_id])
    with open(path, "rb") as photo:
        await message.answer_photo(photo, caption="–í–æ—Ç —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ üìà")
    os.remove(path)

# üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞
async def export_diary(message: types.Message):
    path = export_journal(message.from_user.id)
    if not path:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ üíå")
        return
    with open(path, "rb") as file:
        await message.answer_document(file, caption="–í–æ—Ç —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üìî")
    os.remove(path)

# üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –≤—ã–±–æ—Ä
async def ask_timezone(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for offset in range(-12, 15):
        sign = "+" if offset >= 0 else ""
        kb.add(KeyboardButton(f"UTC{sign}{offset}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üåç", reply_markup=kb)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
async def set_user_timezone(message: types.Message):
    text = message.text.strip().upper()
    if text.startswith("UTC"):
        try:
            offset = int(text.replace("UTC", ""))
            set_timezone(message.from_user.id, offset)
            await message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")
        except:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(mood_callback, lambda c: c.data.startswith("mood_"))
    dp.register_message_handler(mood_request, lambda m: m.text == "üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    dp.register_message_handler(show_stats, lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.register_message_handler(send_mood_plot, lambda m: m.text == "üìà –ì—Ä–∞—Ñ–∏–∫")
    dp.register_message_handler(export_diary, lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞")
    dp.register_message_handler(ask_timezone, lambda m: m.text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    dp.register_message_handler(set_user_timezone, lambda m: m.text.upper().startswith("UTC"))
