from aiogram import types, Dispatcher
from datetime import datetime
import json
import os

from handlers.premium import is_premium  # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–º–∏—É–º–∞

JOURNAL_FILE = "journal_data.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∂—É—Ä–Ω–∞–ª
def load_journal():
    if not os.path.exists(JOURNAL_FILE):
        return {}
    with open(JOURNAL_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
def save_journal(data):
    with open(JOURNAL_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫
user_journal_state = set()

# –ö–Ω–æ–ø–∫–∞ ¬´üìî –î–Ω–µ–≤–Ω–∏–∫¬ª ‚Äî –≤—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏
async def ask_journal(message: types.Message):
    user_journal_state.add(message.from_user.id)
    await message.answer(
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ üíõ\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    )

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞–ø–∏—Å—å
async def save_journal_entry(message: types.Message):
    if message.from_user.id not in user_journal_state:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞

    user_id = str(message.from_user.id)
    journal_data = load_journal()

    if user_id not in journal_data:
        journal_data[user_id] = []

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    if not is_premium(user_id) and len(journal_data[user_id]) >= 3:
        await message.answer(
            "ü•∫ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫.\n\n"
            "üíé –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–µ–º–∏—É–º¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!"
        )
        user_journal_state.remove(message.from_user.id)
        return

    journal_data[user_id].append({
        "text": message.text,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    save_journal(journal_data)
    user_journal_state.remove(message.from_user.id)

    await message.answer("üå∏ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∞—Å—å. –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ üíõ")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_journal_handlers(dp: Dispatcher):
    dp.register_message_handler(ask_journal, lambda m: m.text == "üìî –î–Ω–µ–≤–Ω–∏–∫")
    dp.register_message_handler(save_journal_entry, content_types=types.ContentTypes.TEXT)
